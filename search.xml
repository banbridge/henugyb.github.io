<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[网易云热评]]></title>
    <url>%2F2018%2F08%2F02%2F2018%2F08%2Fcomment1%2F</url>
    <content type="text"><![CDATA[23岁 你妈问你：怎么还没有男朋友你说工作刚开始， 要稳定你说学习重要，先考研你说交际圈太小，没有努力的方向你说，你在等一个合适的人你妈说赶紧25岁大部分朋友都已经安定下了感情谈婚论嫁你的姑姑阿姨婶婶姨娘舅妈，突然都认识了一群青年才俊，要介绍给你你妈也开始着急，让你别等了别挑了他说女人过了25就开始过期你开始想，不然，随便一个人也就是算了吧？过得去的，老实点的27岁打开朋友圈，朋友同学已经开始晒娃你遇到了一个过得去的人家庭条件过得去 长相过得去 性格过得去虽然不是你想要的样子，但反正过得去就好“嫁人，家里过得去人老实，就行了”“你都27了，不能挑了，你妈和你家亲戚都这么说”于是也开始谈婚论嫁你们把彩礼，陪嫁，收入礼金，算得清清楚楚但谁也没有问对方，手机里舍不得删的号码是谁28岁你终于也要结婚，婚礼上你穿着雪白的婚纱，你当场最美的姑娘在摇晃的灯光下，你想起在想象中，你也曾和一个人站在这个地方。那个人穿着笔挺的西装，戴着整齐的领结，拿着花向你走来。在欢呼声中，果然有一个人走来了。可惜，不是想象里的那一个。站在礼台上，司仪问，无论贫穷或富贵，健康或疾病，你们都愿意永远在一起吗？你说：我愿意。新郎说：我愿意。两个人都意外的说得很随意，好像身边是谁都可以给出这个回答。之后的日子，你就变成了妻子。告别了十指不沾阳春水的少女时代，开始打扫整个家，学着洗衣，烧饭，做菜。说起来，你甚至没为父母做过几次这些。29岁你怀孕了。辞掉了已经逐渐站稳脚跟的工作，在家养胎。他照例早早地出门上班，晚上入夜回家。家里的家务还是你的，孕吐的难受时，身边也没有什么人。孕检的时候，他陪了你几次，然后就抱怨排队太浪费时间，不再去了。整理有时婆婆会来，让你大吃大喝，都是给孩子补的。是你一个人，挨过了这漫漫十月。生产那天，他来了。你疼得大哭，大叫。他从手机里抬起头，皱着眉头说：喊什么，哪有那么疼，别人都没喊呢。30岁这是最痛苦的一年。孩子一小时醒一次，他们说奶粉没营养，一定要你坚持母乳，于是你跟着一小时喂一次奶，你被婆婆压在床上坐月子，不许落地，不许洗澡。每天喝无数种汤，吃十几种大荤大补的食物，婆婆怕饿着他的乖孙子，变着法的给你下奶。凌晨两点，孩子又哭了。你迷迷糊糊的起来。你的乳量不多，婴儿饥饿的吮吸疼得你抽气，彷佛那一口口喝的不是奶，是血。回过头，丈夫不在床上。从第三天起，他就嫌孩子太吵，去客房睡了。从这一年起，你想的就不再是裙子，美食，化妆品，而是孩子，孩子，孩子。你再也出不了们，晚上在给孩子喂奶，白天在家做家务带孩子。每天披头散发，身边都是孩子哇哇的哭声。33岁孩子长大了一点，你终于可以轻松点了。带了三年的孩子从未睡过一个安稳觉。从没有好好吃过一顿饭，站在镜子前，你甚至不敢相信眼前这个面色蜡黄，头发枯乱的女人是自己。于是打开手机，想给自己买点东西，这三年来你订单上的全都是婴儿用品，却想起自己已经整整三年没有工作，积蓄已经花费的差不多了，所以到了晚上，你跟你的丈夫说 给我打要打点钱吧。你丈夫一听就勃然大怒：怎么又要钱！我不是每月都给你钱了吗！你也生气了，跟他理论，养孩子每个月一千块钱能干什么？问他知不知道一罐好奶粉要多少钱？孩子一个月喝多少奶粉，又要多少尿不湿，你跟他说全部都是你自己在贴钱。你的丈夫在冷笑，眼里全都是鄙夷和嘲讽，“说这么多不就是要钱，一天到晚在家玩，还要花那么多钱。”他说35岁孩子适应了幼儿园。你找到了一份临时工。你的丈夫升职了，一切都好像在往好的方向发展。然而，你在你丈夫的衣领上，发现了一枚红唇印，你们大吵了一架，你指着丈夫骂他不要脸。你丈夫说，她温柔懂事，你有什么？恍惚间，你想起当年你们刚认识时，他也是这么夸你的他说你真是温柔，说话都是轻轻柔柔的。连和人争辩都不会呢。你回忆了一下刚才的自己，突然也陷入了疑问。你的温柔懂事呢？最终，你们还是和好了。你的父母劝，她的父母劝，你们的朋友都劝。他们说，七年之痒嘛，他就是现在婚姻懈怠了，让他收收心就行。他们说，男人嘛，总会有这么点心思的你得忍忍他们说，别的女人在厉害吗，老婆也是你的 没事的。于是你就忍了。因为还有人说：孩子不能没有爸爸。40岁你好像都不知道怎么回事，就突然迈入4字头了。四十不惑，你真的突然对生活看得很开。他发福的厉害，顶着一点一个大肚子，眉眼里退去了结婚时的清俊，睡觉时的呼噜倒越发响了，但竟然真的收了一点心，没再闹出太多的事，但你也已经没有太在乎。你只尽心的照顾着你的孩子。45岁孩子初中了，到了叛逆期，对父母说话的方式变成了大喊大叫，他高吼：我要自由，我要独立，你们别管我！你端着果盘，想靠近又不敢靠近。看的这个漂亮的孩子，你有点想不通。我从小养大的孩子，怎么就突然变得不一样了呢？但你不敢去反驳他，你甚至拦住了要去揍孩子的丈夫因为这个孩子，是你最后的希望了，你的人生是这样了，你不希望你孩子的人生也变成这样的循环，你把所有的希望都压在了孩子的身上，给予了更多的关心和关注，于是你的孩子吼得更大声了。47岁孩子到了高中，开始住校，你想念孩子，给他打电话，他嗯嗯啊哦哦的应着，在一分钟之内挂了电话，你看着黑下来的手机，和身边背对着你打呼的丈夫发了一会的呆。48岁孩子要高考了，你比他还要紧张，每天给她准备吃喝，替他提心吊胆。受着孩子的排斥照顾他。高考后，你期待他填一个离家近，安稳，好找工作的志愿。孩子“砰”的关上了门，填下了千里之外，一个有趣，却并不那么热门的专业。你气得直跺脚，最终却只能长叹一口气，替他准备好了行李。50岁你的身体慢慢的变差。远方的孩子打来电话，他说想家。你一听到就流泪了。却强装出笑的声音，说，那妈等你回来。然后你跟孩子说了邻居家的狗生小崽、说了隔壁的姑娘出嫁了、说了对面的房子要拆迁，还像往常一样抱怨了他爸爸的一种种臭毛病。还是听着听着，笑了起来。他说:好，妈。我放假就回去看看。你松了口气，挂上电话。看见丈夫也正支楞着耳朵听得起劲，被发现了，才假装什么事都没有的别过头去看电视。你看着想笑，就问他：也是小孩子了？他涨着脸说：哪有！胡说！然后扭头回了房间你笑出了声。然后你看着他别扭的背影，发胖的身子，泛白的头发发现你们都老了。55岁孩子毕业了，一时难以找到工作。他漂泊在外，有忧愁，有懊恼，有苦闷。再次来电话。这一次，你没有再阻止他。你说，孩子，去做你想做的。你说，妈就在家。再困难的时候，你都还有家。孩子很高兴，于是留在了那个地方。慢慢慢慢的往上攀爬。你看着他的工作慢慢进入正轨，看着他越来越好。你很高兴。只是他越来越忙，却不能不再能常回家。于是你和你和丈夫坐在沙发上，守着空荡荡的房子。等着一年归家两三次的孩子。60岁孩子也结婚了。新娘是一个美丽的姑娘。雪白的皮肤，黑亮的长发，笑起来还有酒窝。很温柔。温柔到你，甚至以为见到了自己年轻的时候。她说：妈，喝茶。你接过茶，拍着姑娘的手，递上一个红包你希望他能一直这么温柔。儿子和媳妇一起搬了出去，有了自己的家。丈夫退休了，没事就出门打牌，下棋。也不常回家。家里一下子空寂下来，你不知道自己该干什么了。回忆过去的30年，你的人生里只有孩子和丈夫。61岁你开始跟着小区里的邻居去跳广场舞。大型的喇叭里放起了那些，被年轻人笑话的音乐。你还有点不知道从哪里入手，但很快，就被拉近的人群。楼上的大姐对你说：你刚来吧？没事，跟着我们动就行。大姐的嗓门响亮，很热情的拉着你一起跳。你跟着她一点点融入了队伍。你们都是附近的女人，都是孩子不在身边，丈夫自己忙着的。于是你们相约，以后都一起来跳跳舞，聊聊天。这段时间你过得挺快乐，你终于知道为什么那么多人喜欢来广场跳舞了，那句话怎么说来着？她们跳的不是舞，是寂寞。62岁儿子的孩子诞生了。他们都太忙了，也没有经验。兵荒马乱，手足无措中，儿子拨通了你的电话。他说妈，帮我们带一下孩子吧。当年你的婆婆并没有帮你太多。但是今天，你儿子的一句话，还是让你无从拒绝。一句话，把你拉回了那最痛苦的一年。区别就是这次你是用奶瓶小心地给孩子喂奶。70岁孩子的孩子也长大了。你彻底老了。头发发花白，跳不动舞了。75岁你躺在病床上，身边围满了人。大家都在哭。他们说，你是好女儿，你是好妻子，你是好母亲。你是一个好人。你闭着眼睛，呼吸都很困难了。你知道自己快死了。但你依旧听清了这些话。你有点茫然。好女儿？是说你为了让妈妈安心点，不像唠叨点，就随便嫁人算了吗？好妻子？是说你的丈夫出轨了，也能忍下来的事吗？好母亲？是说你知道自己的人生就这样了，于事把压力都施加孩子，还是说你为了自己的孩子，放弃你喜欢的生活呢？这样，就是个好人？此时你的眼前闪过了很多东西。高中操场上的白衣少年，十七岁飞扬的裙摆，和好友手拉着手逛遍商场时的大笑。。许多许多画面都这一瞬间出现，揉搓，混合在了一起。你的心脏剧烈的跳动了一下，手脚飞快的冰冷。身边的哭嚎声一下子大了起来。在意识消失之前，你只是来得及想最后一个问题：我愿意当一个好人吗？（二）一觉醒来，你发现自己回到了23岁。你妈问你：怎么还没交男朋友？你说：嘻嘻然后拉黑了你妈。]]></content>
      <categories>
        <category>随心</category>
      </categories>
      <tags>
        <tag>网易热评</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[page]]></title>
    <url>%2F2018%2F08%2F02%2Fpage%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[考研]]></title>
    <url>%2F2018%2F03%2F01%2F2018%2F3%2F%E8%80%83%E7%A0%94%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Java的填坑之路——he函数参数的两种调用]]></title>
    <url>%2F2018%2F02%2F02%2F2018%2F2%2F%E4%B8%A4%E7%A7%8D%E8%B0%83%E7%94%A8%2F</url>
    <content type="text"><![CDATA[值传递与引用传递程序设计语言中将参数传递给函数方法有两种，，按值传递(call by value)表示方法接收的是调用者提供的值。而按引用传递(call by reference)表示方法接收的是调用者提供的变量地址。前者不可以修改原参数的值，而后者可以，因为它修改的是那个地址里边的东西，原参数肯定会变。而Java总是采用按值调用比如一个方法： private static void tripleValue(double per) { per*=3; System.out.println(&quot;方法结束时：per=&quot; + per); } 但是你调用，却不会改变传入的值： double per = 10; System.out.println(&quot;执行方法之前:per=&quot; + per); tripleValue(per); System.out.println(&quot;执行方法之后:per=&quot; + per); 方法执行后per的值仍然是10。 然而方法参数共有两种类型： 基本参数类型（数字，布尔值） 对象 一个方法不可能修改一个基本数据类型的参数，但是对象作为参数就不同了，可以利用下边的这个方法实现更改: private static void tripleSalary(Employ x) { x.raiseSalary(120); System.out.println(&quot;方法结束时：salary=&quot; + x.getSalary()); } 执行下边一条命令： Employ harry = new Employ(&quot;Harry&quot;, 50000); System.out.println(&quot;执行方法之前:salary=&quot; + harry.getSalary()); tripleSalary(harry); 结果： 测试对象： 执行方法之前:salary=50000.0 方法结束时：salary=110000.0 执行方法之后:salary=110000.0 方法结束后，harry相应属性的值已经改变。按理说Java是按值传递，不应该改变才对，再看下边一个方法： private static void swap(Employ x, Employ y) { Employ e = x; x = y; y = e; System.out.println(&quot;方法完成时:x=&quot; + x.getName()); System.out.println(&quot;方法完成时:y=&quot; + y.getName()); } /** * Test3: 测试对象的传递类型 */ System.out.println(&quot;\n测试对象：&quot;); Employ jack = new Employ(&quot;Jack&quot;, 50000); Employ marry = new Employ(&quot;Marry&quot;, 0); System.out.println(&quot;执行方法之前:Jack = &quot; + jack.getName()); System.out.println(&quot;执行方法之前:Marry = &quot; + marry.getName()); swap(jack, marry); System.out.println(&quot;执行方法之后:Jack = &quot; + jack.getName()); System.out.println(&quot;执行方法之后:Marry = &quot; + marry.getName()); 执行结果： 测试对象： 执行方法之前:Jack = Jack 执行方法之前:Marry = Marry 方法完成时:x=Marry 方法完成时:y=Jack 执行方法之后:Jack = Jack 执行方法之后:Marry = Marry 方法并没有改变储存在jack和marry中对象引用，swap方法的参数只是x和y被初始化为两个对象的引用,这个方法交换的是两个拷贝。 在这里总结一下：我认为对对象的引用就是对地址的一份copy，而对基本参数的传递就是按值，然而为什么上边的对象的传递为什么会出现上述结果呢？ 比如说你new了一个对象harry，这个对象地址是0x1234，在方法中方法参数x是对harry对象地址的一个copy，地址也是0x1234，当你在方法中修改对象的状态时，改变的是x所指地址里边状态的改变，你在方法外边访问harry对象时，地址还是0x1234但是该地址里边的值已经在方法里边改变了，所以harry对象的状态也会改变。现在你new了两个对象jack和marry，地址分别为0x1235和0x1236,当进入swap方法时，两个参数x和y分别是对jack和marry地址的copy,x指向地址0x1235,而y指向0x1236，方法里边交换的只是地址值，方法结束时，x指向地址0x1236,而y指向0x1235,但方法外边jack和marry还是原地址，里边的值当然不会改变了 哈哈哈! 完整代码如下：public static void main(String[] args) { /** * Test1: 测试变量的传递类型 */ System.out.println(&quot;测试变量：&quot;); double per = 10; System.out.println(&quot;执行方法之前:per=&quot; + per); tripleValue(per); System.out.println(&quot;执行方法之后:per=&quot; + per); /** * Test2: 测试对象的传递类型 */ System.out.println(&quot;\n测试对象：&quot;); Employ harry = new Employ(&quot;Harry&quot;, 50000); System.out.println(&quot;执行方法之前:salary=&quot; + harry.getSalary()); tripleSalary(harry); System.out.println(&quot;执行方法之后:salary=&quot; + harry.getSalary()); /** * Test3: 测试对象的传递类型 */ System.out.println(&quot;\n测试对象：&quot;); Employ jack = new Employ(&quot;Jack&quot;, 50000); Employ marry = new Employ(&quot;Marry&quot;, 0); System.out.println(&quot;执行方法之前:Jack = &quot; + jack.getName()); System.out.println(&quot;执行方法之前:Marry = &quot; + marry.getName()); swap(jack, marry); System.out.println(&quot;执行方法之后:Jack = &quot; + jack.getName()); System.out.println(&quot;执行方法之后:Marry = &quot; + marry.getName()); } private static void swap(Employ x, Employ y) { Employ e = x; x = y; y = e; System.out.println(&quot;方法完成时:x=&quot; + x.getName()); System.out.println(&quot;方法完成时:y=&quot; + y.getName()); } private static void tripleSalary(Employ harry) { harry.raiseSalary(120); System.out.println(&quot;方法结束时：salary=&quot; + harry.getSalary()); } private static void tripleValue(double per) { per*=3; System.out.println(&quot;方法结束时：per=&quot; + per); } // 输出： 测试变量： 执行方法之前:per=10.0 方法结束时：per=30.0 执行方法之后:per=10.0 测试对象： 执行方法之前:salary=50000.0 方法结束时：salary=110000.0 执行方法之后:salary=110000.0 测试对象： 执行方法之前:Jack = Jack 执行方法之前:Marry = Marry 方法完成时:x=Marry 方法完成时:y=Jack 执行方法之后:Jack = Jack 执行方法之后:Marry = Marry]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo填坑之路]]></title>
    <url>%2F2018%2F02%2F01%2F2018%2F2%2F2018-2-first%2F</url>
    <content type="text"><![CDATA[重拾Hexo如有兴趣自行搭建，搭建过程如下(PS~由于网上教程已经很多了，我就不写了，在此奉上链接)：安装Hexo：Hexo的安装绑定自己的域名： 个人域名绑定修改next主题: next官方文档（文档已经说的很清楚了）~~效果看本站就好~~]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
