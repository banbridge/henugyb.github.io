<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>枯瑜的个人博客</title>
  
  <subtitle>你好，陌生人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.gyblosing.wang/"/>
  <updated>2018-08-02T13:06:35.769Z</updated>
  <id>http://www.gyblosing.wang/</id>
  
  <author>
    <name>高逸博</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网易云热评</title>
    <link href="http://www.gyblosing.wang/2018/08/02/2018/08/comment1/"/>
    <id>http://www.gyblosing.wang/2018/08/02/2018/08/comment1/</id>
    <published>2018-08-02T12:57:00.000Z</published>
    <updated>2018-08-02T13:06:35.769Z</updated>
    
    <content type="html"><![CDATA[<p><b><br> 23岁  <br><br>你妈问你：怎么还没有男朋友<br><br>你说工作刚开始， 要稳定<br><br>你说学习重要，先考研<br><br>你说交际圈太小，没有努力的方向<br><br>你说，你在等一个合适的人<br><br>你妈说赶紧<br><br>25岁<br><br>大部分朋友都已经安定下了感情<br><br>谈婚论嫁<br><br>你的姑姑阿姨婶婶姨娘舅妈，突然都认识了一群青年才俊，要介绍给你<br><br>你妈也开始着急，让你别等了别挑了<br><br>他说女人过了25就开始过期<br><br>你开始想，不然，随便一个人也就是算了吧？<br><br>过得去的，老实点的<br><br>27岁<br><br>打开朋友圈，朋友同学已经开始晒娃<br><br>你遇到了一个过得去的人<br><br>家庭条件过得去 长相过得去 性格过得去<br><br>虽然不是你想要的样子，但反正过得去就好<br><br>“嫁人，家里过得去人老实，就行了”<br><br>“你都27了，不能挑了，你妈和你家亲戚都这么说”<br><br>于是也开始谈婚论嫁<br><br>你们把彩礼，陪嫁，收入礼金，算得清清楚楚<br><br>但谁也没有问对方，手机里舍不得删的号码是谁<br><br>28岁<br><br>你终于也要结婚，<br><br>婚礼上你穿着雪白的婚纱，你当场最美的姑娘<br><br>在摇晃的灯光下，你想起在想象中，你也曾和一个人站在这个地方。<br><br>那个人穿着笔挺的西装，戴着整齐的领结，拿着花向你走来。<br><br>在欢呼声中，果然有一个人走来了。<br><br>可惜，不是想象里的那一个。<br><br>站在礼台上，司仪问，无论贫穷或富贵，健康或疾病，你们都愿意永远在一起吗？<br><br>你说：我愿意。<br><br>新郎说：我愿意。<br><br>两个人都意外的说得很随意，好像身边是谁都可以给出这个回答。<br><br>之后的日子，你就变成了妻子。<br><br>告别了十指不沾阳春水的少女时代，开始打扫整个家，学着洗衣，烧饭，做菜。<br><br>说起来，你甚至没为父母做过几次这些。<br><br>29岁<br><br>你怀孕了。<br><br>辞掉了已经逐渐站稳脚跟的工作，在家养胎。<br><br>他照例早早地出门上班，晚上入夜回家。<br><br>家里的家务还是你的，孕吐的难受时，<br><br>身边也没有什么人。<br><br>孕检的时候，他陪了你几次，然后就抱怨排队太浪费时间，不再去了。整理<br><br>有时婆婆会来，让你大吃大喝，都是给孩子补的。<br><br>是你一个人，挨过了这漫漫十月。<br><br>生产那天，他来了。<br><br>你疼得大哭，大叫。<br><br>他从手机里抬起头，皱着眉头说：喊什么，哪有那么疼，别人都没喊呢。<br><br>30岁<br><br>这是最痛苦的一年。<br><br>孩子一小时醒一次，他们说奶粉没营养，<br><br>一定要你坚持母乳，于是你跟着一小时喂一次奶，<br><br>你被婆婆压在床上坐月子，不许落地，不许洗澡。<br><br>每天喝无数种汤，吃十几种大荤大补的食物，婆婆怕饿着他的乖孙子，变着法的给你下奶。<br><br>凌晨两点，孩子又哭了。你迷迷糊糊的起来。<br><br>你的乳量不多，婴儿饥饿的吮吸疼得你抽气，<br><br>彷佛那一口口喝的不是奶，是血。<br><br>回过头，丈夫不在床上。<br><br>从第三天起，他就嫌孩子太吵，去客房睡了。<br><br>从这一年起，你想的就不再是裙子，美食，化妆品，而是孩子，孩子，孩子。你再也出不了们，晚上在给孩子喂奶，白天在家做家务带孩子。<br><br>每天披头散发，身边都是孩子哇哇的哭声。<br><br>33岁<br><br>孩子长大了一点，你终于可以轻松点了。<br><br>带了三年的孩子从未睡过一个安稳觉。从没有好好吃过一顿饭，站在镜子前，你甚至不敢相信眼前这个面色蜡黄，头发枯乱的女人是自己。<br><br>于是打开手机，想给自己买点东西，<br><br>这三年来你订单上的全都是婴儿用品，却想起自己已经整整三年没有工作，积蓄已经花费的差不多了，<br><br>所以到了晚上，你跟你的丈夫说 给我打要打点钱吧。<br><br>你丈夫一听就勃然大怒：怎么又要钱！<br><br>我不是每月都给你钱了吗！<br><br>你也生气了，跟他理论，养孩子每个月一千块钱能干什么？问他知不知道一罐好奶粉要多少钱？孩子一个月喝多少奶粉，又要多少尿不湿，你跟他说全部都是你自己在贴钱。<br><br>你的丈夫在冷笑，眼里全都是鄙夷和嘲讽，<br><br>“说这么多不就是要钱，一天到晚在家玩，还要花那么多钱。”他说<br><br>35岁<br><br>孩子适应了幼儿园。<br><br>你找到了一份临时工。<br><br>你的丈夫升职了，一切都好像在往好的方向发展。<br><br>然而，你在你丈夫的衣领上，发现了一枚红唇印，<br><br>你们大吵了一架，你指着丈夫骂他不要脸。<br><br>你丈夫说，她温柔懂事，你有什么？<br><br>恍惚间，你想起当年你们刚认识时，<br><br>他也是这么夸你的<br><br>他说你真是温柔，说话都是轻轻柔柔的。<br><br>连和人争辩都不会呢。<br><br>你回忆了一下刚才的自己，突然也陷入了疑问。<br><br>你的温柔懂事呢？<br><br>最终，你们还是和好了。<br><br>你的父母劝，她的父母劝，你们的朋友都劝。<br><br>他们说，七年之痒嘛，<br><br>他就是现在婚姻懈怠了，让他收收心就行。<br><br>他们说，男人嘛，总会有这么点心思的<br><br>你得忍忍<br><br>他们说，别的女人在厉害吗，老婆也是你的 没事的。<br><br>于是你就忍了。<br><br>因为还有人说：孩子不能没有爸爸。<br><br>40岁<br><br>你好像都不知道怎么回事，就突然迈入4字头了。<br><br>四十不惑，你真的突然对生活看得很开。<br><br>他发福的厉害，顶着一点一个大肚子，眉眼里退去了结婚时的清俊，睡觉时的呼噜倒越发响了，<br><br>但竟然真的收了一点心，没再闹出太多的事，<br><br>但你也已经没有太在乎。<br><br>你只尽心的照顾着你的孩子。<br><br>45岁<br><br>孩子初中了，<br><br>到了叛逆期，对父母说话的方式变成了大喊大叫，<br><br>他高吼：我要自由，我要独立，你们别管我！<br><br>你端着果盘，想靠近又不敢靠近。<br><br>看的这个漂亮的孩子，你有点想不通。<br><br>我从小养大的孩子，怎么就突然变得不一样了呢？<br><br>但你不敢去反驳他，你甚至拦住了要去揍孩子的丈夫<br><br>因为这个孩子，是你最后的希望了，<br><br>你的人生是这样了，<br><br>你不希望你孩子的人生也变成这样的循环，<br><br>你把所有的希望都压在了孩子的身上，<br><br>给予了更多的关心和关注，<br><br>于是你的孩子吼得更大声了。<br><br>47岁<br><br>孩子到了高中，开始住校，<br><br>你想念孩子，给他打电话，他嗯嗯啊哦哦的应着，在一分钟之内挂了电话，<br><br>你看着黑下来的手机，和身边背对着你打呼的丈夫<br><br>发了一会的呆。<br><br>48岁<br><br>孩子要高考了，你比他还要紧张，每天给她准备吃喝，替他提心吊胆。受着孩子的排斥照顾他。<br><br>高考后，你期待他填一个离家近，安稳，好找工作的志愿。<br><br>孩子“砰”的关上了门，填下了千里之外，一个有趣，却并不那么热门的专业。<br><br>你气得直跺脚，最终却只能长叹一口气，替他准备好了行李。<br><br>50岁<br><br>你的身体慢慢的变差。<br><br>远方的孩子打来电话，他说想家。<br><br>你一听到就流泪了。<br><br>却强装出笑的声音，说，那妈等你回来。<br><br>然后你跟孩子说了邻居家的狗生小崽、说了隔壁的姑娘出嫁了、说了对面的房子要拆迁，还像往常一样抱怨了他爸爸的一种种臭毛病。<br><br>还是听着听着，笑了起来。<br><br>他说:好，妈。我放假就回去看看。<br><br>你松了口气，挂上电话。<br><br>看见丈夫也正支楞着耳朵听得起劲，被发现了，才假装什么事都没有的别过头去看电视。<br><br>你看着想笑，就问他：也是小孩子了？<br><br>他涨着脸说：哪有！胡说！<br><br>然后扭头回了房间<br><br>你笑出了声。<br><br>然后你看着他别扭的背影，发胖的身子，泛白的头发<br><br>发现你们都老了。<br><br>55岁<br><br>孩子毕业了，一时难以找到工作。<br><br>他漂泊在外，有忧愁，有懊恼，有苦闷。<br><br>再次来电话。<br><br>这一次，你没有再阻止他。<br><br>你说，孩子，去做你想做的。<br><br>你说，妈就在家。再困难的时候，你都还有家。<br><br>孩子很高兴，于是留在了那个地方。<br><br>慢慢慢慢的往上攀爬。<br><br>你看着他的工作慢慢进入正轨，<br><br>看着他越来越好。<br><br>你很高兴。<br><br>只是他越来越忙，却不能不再能常回家。<br><br>于是你和你和丈夫坐在沙发上，守着空荡荡的房子。等着一年归家两三次的孩子。<br><br>60岁<br><br>孩子也结婚了。<br><br>新娘是一个美丽的姑娘。<br><br>雪白的皮肤，黑亮的长发，笑起来还有酒窝。<br><br>很温柔。<br><br>温柔到你，甚至以为见到了自己年轻的时候。<br><br>她说：妈，喝茶。<br><br>你接过茶，拍着姑娘的手，递上一个红包<br><br>你希望他能一直这么温柔。<br><br>儿子和媳妇一起搬了出去，有了自己的家。<br><br>丈夫退休了，没事就出门打牌，下棋。<br><br>也不常回家。<br><br>家里一下子空寂下来，你不知道自己该干什么了。<br><br>回忆过去的30年，你的人生里只有孩子和丈夫。<br><br>61岁<br><br>你开始跟着小区里的邻居去跳广场舞。<br><br>大型的喇叭里放起了那些，被年轻人笑话的音乐。<br><br>你还有点不知道从哪里入手，<br><br>但很快，就被拉近的人群。<br><br>楼上的大姐对你说：你刚来吧？没事，跟着我们动就行。<br><br>大姐的嗓门响亮，很热情的拉着你一起跳。<br><br>你跟着她一点点融入了队伍。<br><br>你们都是附近的女人，都是孩子不在身边，<br><br>丈夫自己忙着的。<br><br>于是你们相约，以后都一起来跳跳舞，聊聊天。<br><br>这段时间你过得挺快乐，你终于知道为什么那么多人喜欢来广场跳舞了，<br><br>那句话怎么说来着？<br><br>她们跳的不是舞，是寂寞。<br><br>62岁<br><br>儿子的孩子诞生了。<br><br>他们都太忙了，也没有经验。<br><br>兵荒马乱，手足无措中，儿子拨通了你的电话。<br><br>他说妈，帮我们带一下孩子吧。<br><br>当年你的婆婆并没有帮你太多。<br><br>但是今天，你儿子的一句话，还是让你无从拒绝。<br><br>一句话，把你拉回了那最痛苦的一年。<br><br>区别就是这次你是用奶瓶小心地给孩子喂奶。<br><br>70岁<br><br>孩子的孩子也长大了。<br><br>你彻底老了。<br><br>头发发花白，跳不动舞了。<br><br>75岁<br><br>你躺在病床上，身边围满了人。<br><br>大家都在哭。<br><br>他们说，你是好女儿，你是好妻子，你是好母亲。<br><br>你是一个好人。<br><br>你闭着眼睛，呼吸都很困难了。你知道自己快死了。<br><br>但你依旧听清了这些话。你有点茫然。<br><br>好女儿？是说你为了让妈妈安心点，不像唠叨点，就随便嫁人算了吗？<br><br>好妻子？是说你的丈夫出轨了，也能忍下来的事吗？<br><br>好母亲？是说你知道自己的人生就这样了，于事把压力都施加孩子，还是说你为了自己的孩子，放弃你喜欢的生活呢？<br><br>这样，就是个好人？<br><br>此时你的眼前闪过了很多东西。<br><br>高中操场上的白衣少年，十七岁飞扬的裙摆，和好友手拉着手逛遍商场时的大笑。。<br><br>许多许多画面都这一瞬间出现，揉搓，混合在了一起。<br><br>你的心脏剧烈的跳动了一下，手脚飞快的冰冷。<br><br>身边的哭嚎声一下子大了起来。<br><br>在意识消失之前，你只是来得及想最后一个问题：<br><br>我愿意当一个好人吗？<br><br>（二）<br><br>一觉醒来，你发现自己回到了23岁。<br><br>你妈问你：怎么还没交男朋友？<br><br>你说：嘻嘻<br><br>然后拉黑了你妈。</b></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;b&gt;&lt;br&gt; 23岁  &lt;br&gt;&lt;br&gt;你妈问你：怎么还没有男朋友&lt;br&gt;&lt;br&gt;你说工作刚开始， 要稳定&lt;br&gt;&lt;br&gt;你说学习重要，先考研&lt;br&gt;&lt;br&gt;你说交际圈太小，没有努力的方向&lt;br&gt;&lt;br&gt;你说，你在等一个合适的人&lt;br&gt;&lt;br&gt;你妈说赶紧&lt;br&gt;&lt;br&gt;2
      
    
    </summary>
    
      <category term="随心" scheme="http://www.gyblosing.wang/categories/%E9%9A%8F%E5%BF%83/"/>
    
    
      <category term="网易热评" scheme="http://www.gyblosing.wang/tags/%E7%BD%91%E6%98%93%E7%83%AD%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>page</title>
    <link href="http://www.gyblosing.wang/2018/08/02/page/"/>
    <id>http://www.gyblosing.wang/2018/08/02/page/</id>
    <published>2018-08-02T12:56:27.000Z</published>
    <updated>2018-08-02T12:56:27.885Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>考研</title>
    <link href="http://www.gyblosing.wang/2018/03/01/2018/3/%E8%80%83%E7%A0%94/"/>
    <id>http://www.gyblosing.wang/2018/03/01/2018/3/考研/</id>
    <published>2018-03-01T08:05:59.000Z</published>
    <updated>2018-03-01T08:05:59.456Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java的填坑之路——he函数参数的两种调用</title>
    <link href="http://www.gyblosing.wang/2018/02/02/2018/2/%E4%B8%A4%E7%A7%8D%E8%B0%83%E7%94%A8/"/>
    <id>http://www.gyblosing.wang/2018/02/02/2018/2/两种调用/</id>
    <published>2018-02-02T05:36:42.000Z</published>
    <updated>2018-02-02T08:04:46.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h1><p>程序设计语言中将参数传递给函数方法有两种，，按值传递(call by value)表示方法接收的是调用者提供的值。<br>而按引用传递(call by reference)表示方法接收的是调用者提供的变量地址。前者不可以修改原参数的值，而<br>后者可以，因为它修改的是那个地址里边的东西，原参数肯定会变。<strong><em>而Java总是采用按值调用</em></strong><br>比如一个方法：</p><pre><code>private static void tripleValue(double per) {        per*=3;        System.out.println(&quot;方法结束时：per=&quot; + per);}</code></pre><p> 但是你调用，却不会改变传入的值：</p><pre><code>double per = 10;System.out.println(&quot;执行方法之前:per=&quot; + per);tripleValue(per);System.out.println(&quot;执行方法之后:per=&quot; + per);</code></pre><p>方法执行后per的值仍然是10。</p><p>然而方法参数共有两种类型：</p><ul><li>基本参数类型（数字，布尔值）</li><li>对象</li></ul><p>一个方法不可能修改一个基本数据类型的参数，但是对象作为参数就不同了，可以利用下边的这个方法实现更改:</p><pre><code>private static void tripleSalary(Employ x) {    x.raiseSalary(120);    System.out.println(&quot;方法结束时：salary=&quot; + x.getSalary());}</code></pre><p>执行下边一条命令：</p><pre><code>Employ harry = new Employ(&quot;Harry&quot;, 50000);System.out.println(&quot;执行方法之前:salary=&quot; + harry.getSalary());tripleSalary(harry);    </code></pre><p>结果：</p><pre><code>测试对象：执行方法之前:salary=50000.0方法结束时：salary=110000.0执行方法之后:salary=110000.0</code></pre><p>方法结束后，harry相应属性的值已经改变。按理说Java是按值传递，不应该改变才对，再看下边一个方法：</p><pre><code>private static void swap(Employ x, Employ y) {   Employ e = x;   x = y;   y = e;   System.out.println(&quot;方法完成时:x=&quot; + x.getName());   System.out.println(&quot;方法完成时:y=&quot; + y.getName());}/** * Test3: 测试对象的传递类型 */System.out.println(&quot;\n测试对象：&quot;);Employ jack = new Employ(&quot;Jack&quot;, 50000);Employ marry = new Employ(&quot;Marry&quot;, 0);System.out.println(&quot;执行方法之前:Jack = &quot; + jack.getName());System.out.println(&quot;执行方法之前:Marry = &quot; + marry.getName());swap(jack, marry);System.out.println(&quot;执行方法之后:Jack = &quot; + jack.getName());System.out.println(&quot;执行方法之后:Marry = &quot; + marry.getName());</code></pre><p>执行结果：</p><pre><code>测试对象：执行方法之前:Jack = Jack执行方法之前:Marry = Marry方法完成时:x=Marry方法完成时:y=Jack执行方法之后:Jack = Jack执行方法之后:Marry = Marry</code></pre><p>方法并没有改变储存在jack和marry中对象引用，swap方法的参数只是x和y被初始化为两个对象的引用,<br>这个方法交换的是两个拷贝。</p><p>在这里总结一下：我认为对对象的引用就是对地址的一份copy，而对基本参数的传递就是按值，然而为什<br>么上边的对象的传递为什么会出现上述结果呢？</p><p>比如说你new了一个对象harry，这个对象地址是0x1234，在方法中方法参数x是对harry对象地址的一个copy，地址<br>也是0x1234，当你在方法中修改对象的状态时，改变的是x所指地址里边状态的改变，你在方法外边访问harry对象时，<br>地址还是0x1234但是该地址里边的值已经在方法里边改变了，所以harry对象的状态也会改变。<br><br>现在你new了两个对象jack和marry，地址分别为0x1235和0x1236,当进入swap方法时，两个参数x和y分别是对jack<br>和marry地址的copy,x指向地址0x1235,而y指向0x1236，方法里边交换的只是地址值，方法结束时，x指向地址0x1236,<br>而y指向0x1235,但方法外边jack和marry还是原地址，里边的值当然不会改变了  哈哈哈!</p><h1 id="完整代码如下："><a href="#完整代码如下：" class="headerlink" title="完整代码如下："></a>完整代码如下：</h1><pre><code>public static void main(String[] args) {    /**     * Test1: 测试变量的传递类型     */    System.out.println(&quot;测试变量：&quot;);    double per = 10;    System.out.println(&quot;执行方法之前:per=&quot; + per);    tripleValue(per);    System.out.println(&quot;执行方法之后:per=&quot; + per);    /**     * Test2: 测试对象的传递类型     */    System.out.println(&quot;\n测试对象：&quot;);    Employ harry = new Employ(&quot;Harry&quot;, 50000);    System.out.println(&quot;执行方法之前:salary=&quot; + harry.getSalary());    tripleSalary(harry);    System.out.println(&quot;执行方法之后:salary=&quot; + harry.getSalary());    /**     * Test3: 测试对象的传递类型     */    System.out.println(&quot;\n测试对象：&quot;);    Employ jack = new Employ(&quot;Jack&quot;, 50000);    Employ marry = new Employ(&quot;Marry&quot;, 0);    System.out.println(&quot;执行方法之前:Jack = &quot; + jack.getName());    System.out.println(&quot;执行方法之前:Marry = &quot; + marry.getName());    swap(jack, marry);    System.out.println(&quot;执行方法之后:Jack = &quot; + jack.getName());    System.out.println(&quot;执行方法之后:Marry = &quot; + marry.getName());}private static void swap(Employ x, Employ y) {    Employ e = x;    x = y;    y = e;    System.out.println(&quot;方法完成时:x=&quot; + x.getName());    System.out.println(&quot;方法完成时:y=&quot; + y.getName());}private static void tripleSalary(Employ harry) {    harry.raiseSalary(120);    System.out.println(&quot;方法结束时：salary=&quot; + harry.getSalary());}private static void tripleValue(double per) {    per*=3;    System.out.println(&quot;方法结束时：per=&quot; + per);}// 输出：   测试变量：执行方法之前:per=10.0方法结束时：per=30.0执行方法之后:per=10.0测试对象：执行方法之前:salary=50000.0方法结束时：salary=110000.0执行方法之后:salary=110000.0测试对象：执行方法之前:Jack = Jack执行方法之前:Marry = Marry方法完成时:x=Marry方法完成时:y=Jack执行方法之后:Jack = Jack执行方法之后:Marry = Marry</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;值传递与引用传递&quot;&gt;&lt;a href=&quot;#值传递与引用传递&quot; class=&quot;headerlink&quot; title=&quot;值传递与引用传递&quot;&gt;&lt;/a&gt;值传递与引用传递&lt;/h1&gt;&lt;p&gt;程序设计语言中将参数传递给函数方法有两种，，按值传递(call by value)表示方法接
      
    
    </summary>
    
      <category term="Java" scheme="http://www.gyblosing.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.gyblosing.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo填坑之路</title>
    <link href="http://www.gyblosing.wang/2018/02/01/2018/2/2018-2-first/"/>
    <id>http://www.gyblosing.wang/2018/02/01/2018/2/2018-2-first/</id>
    <published>2018-02-01T11:29:32.000Z</published>
    <updated>2018-02-01T11:51:23.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重拾Hexo"><a href="#重拾Hexo" class="headerlink" title="重拾Hexo"></a>重拾Hexo</h2><h5 id="如有兴趣自行搭建，搭建过程如下-PS-由于网上教程已经很多了，我就不写了，在此奉上链接-："><a href="#如有兴趣自行搭建，搭建过程如下-PS-由于网上教程已经很多了，我就不写了，在此奉上链接-：" class="headerlink" title="如有兴趣自行搭建，搭建过程如下(PS~由于网上教程已经很多了，我就不写了，在此奉上链接)："></a>如有兴趣自行搭建，搭建过程如下(PS~由于网上教程已经很多了，我就不写了，在此奉上链接)：<br></h5><h5 id="安装Hexo：Hexo的安装"><a href="#安装Hexo：Hexo的安装" class="headerlink" title="安装Hexo：Hexo的安装"></a>安装Hexo：<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">Hexo的安装</a><br></h5><h5 id="绑定自己的域名：-个人域名绑定"><a href="#绑定自己的域名：-个人域名绑定" class="headerlink" title="绑定自己的域名： 个人域名绑定"></a>绑定自己的域名： <a href="http://blog.csdn.net/linshuhe1/article/details/73013730" target="_blank" rel="noopener">个人域名绑定</a><br></h5><h5 id="修改next主题-next官方文档（文档已经说的很清楚了）"><a href="#修改next主题-next官方文档（文档已经说的很清楚了）" class="headerlink" title="修改next主题: next官方文档（文档已经说的很清楚了）"></a>修改next主题: <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next官方文档</a>（文档已经说的很清楚了）<br></h5><h2 id="效果看本站就好"><a href="#效果看本站就好" class="headerlink" title="~~效果看本站就好~~"></a><del>~~<em>效果看本站就好</em></del>~~</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;重拾Hexo&quot;&gt;&lt;a href=&quot;#重拾Hexo&quot; class=&quot;headerlink&quot; title=&quot;重拾Hexo&quot;&gt;&lt;/a&gt;重拾Hexo&lt;/h2&gt;&lt;h5 id=&quot;如有兴趣自行搭建，搭建过程如下-PS-由于网上教程已经很多了，我就不写了，在此奉上链接-：&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="Hexo" scheme="http://www.gyblosing.wang/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.gyblosing.wang/tags/Hexo/"/>
    
  </entry>
  
</feed>
